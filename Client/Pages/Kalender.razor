@inject Blazored.LocalStorage.ILocalStorageService localStore;
@using FestivalVolunteer.Shared.Models;
@using FestivalVolunteer.Client.Services;

@page "/kalender"

<div class="text-center">
    <h1>Vagtoversigt</h1>
</div>

<table class="table">
    <thead>
        <tr>
            <th>Dato</th>
            <th>Arbejdende</th>
            <th>Vagt</th>
            <th>Område</th>
            <th>Tidspunkt</th>
        </tr>
    </thead>
    @if (vagtliste.Any<Shift>())
    {
        @foreach (var vagt in vagtliste)
        {
            <tr>
                <td> @vagt.StartTime.ToString("dd-MM") </td>
                <td> foreach loop med alle på denne vagt her (husk linebreaks) </td>
                <td> @vagt.Name </td>
                <td> @vagt.Area </td>
                <td> @vagt.StartTime.ToString("HH:mm") - @vagt.EndTime.ToString("HH:mm") </td>
                <td> @if (CurrentUser.RoleId==2){<button class="btn btn-primary" style="margin: 5px" onclick=>Rediger</button>} else if (vagt.Locked==false && GetUserShift(vagt.ShiftId.Value).Result){<button class="btn btn-primary" style="margin: 5px" onclick=>Tilmeld</button>}</td>
            </tr>
        }
    }
</table>

@code{
    [Inject]
    public IShiftService ShiftService { get; set; }

    [Inject]
    public IUserService UserService { get; set; }

    public User CurrentUser;
    public List<Shift> vagtliste = new List<Shift>();
    public Filter filter = new Filter();
    public Shift ShiftModel = new Shift();
    public bool editShift;

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = await localStore.GetItemAsync<User>("user");
        if (CurrentUser != null && CurrentUser.TeamId != null)
        {
            filter.TeamId = CurrentUser.TeamId.Value;
            LoadShifts(filter);
        }
    }

    public async void LoadShifts(Filter filter)
    {
        vagtliste = (await ShiftService.GetFilteredShifts(filter)).ToList();
    }

    public async void EditShift(Shift shift)
    {
        editShift = !editShift;
        if (editShift)
        {
            ShiftModel = shift;
        }
    }

    public async Task<bool> GetUserShift(int shiftid)
    {
        UserShift? response = await ShiftService.GetUserShift(CurrentUser.UserId.Value, shiftid);
        bool result = new bool(); 
        if (response != null)
        {
            result = true;
        }
        result = false;

        return result;
    }
}