@inject Blazored.LocalStorage.ILocalStorageService localStore;
@using FestivalVolunteer.Shared.Models;
@using FestivalVolunteer.Client.Services;

@page "/vagtoversigt"

<div class="text-center">
    <h1>Dine vagter</h1>
</div>

<table class="table">
    <thead>
        <tr>
            <th>Dato</th>
            <th>Stilling</th>
            <th>Område</th>
            <th>Tidspunkt</th>
        </tr>
    </thead>
    <tbody>
        @if (vagtliste.Any<Shift>())
        {
            @foreach (var vagt in vagtliste)
            {
                <tr>
                    <td> @vagt.StartTime.ToString("dd-MM") </td>
                    <td> @if (CurrentUser.TeamId != null){@CurrentUser.Name} else{@Default}</td>
                    <td> @vagt.Area </td>
                    <td> @vagt.StartTime.ToString("HH:mm") - @vagt.EndTime.ToString("HH:mm") </td>
                </tr>
            } 
        }
    </tbody>
</table>

@code {
    [Inject]
    public IShiftService ShiftService { get; set; }

    [Inject]
    public IUserService UserService { get; set; }

    public User CurrentUser;
    public List<Shift> vagtliste = new List<Shift>();
    public Filter filter = new Filter();
    public string Default = "N/A";

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = await localStore.GetItemAsync<User>("user");
        if (CurrentUser != null && CurrentUser.TeamId != null)
        {
            filter.UserId = CurrentUser.UserId.Value;
            filter.TeamId = CurrentUser.TeamId.Value;
            LoadShifts(filter);
        }
    }

    public async void LoadShifts(Filter filter)
    {
        vagtliste = (await ShiftService.GetFilteredShifts(filter)).ToList();
    }
}