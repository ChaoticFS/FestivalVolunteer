@using FestivalVolunteer.Client.Services;
@using FestivalVolunteer.Shared.Models;
@inject Blazored.LocalStorage.ILocalStorageService localStore;

@page "/bruger"

<div class="text-center">
    <h1>Brugerside</h1>
</div>

<!-- 
    If elementerne på yderste niveau viser elementer hvis conditions er opfyldte, 
    CurrentUser trækkes fra localstorage i metoden OnInitializedAsync, 
    LoadedData er en bool der sættes til true efter sidedata er blevet initialiseret i samme metode
-->
@if (CurrentUser == null && LoadedData)
{
    <button class="btn btn-primary" style="margin: 5px" onclick=@RegisterUser>Registrer Bruger</button>
}

@if (CurrentUser == null && LoadedData)
{
    <button class="btn btn-primary" style="margin: 5px" onclick=@Login>Log ind</button>
}

@if (CurrentUser != null)
{
    <button class="btn btn-primary" style="margin: 5px" onclick=@Logout>Log ud</button>
}

@if (CurrentUser != null)
{
    <button class="btn btn-primary" style="margin: 5px" onclick=@Profile>Profil</button>
}

@if (RegisterUserActive)
{
    <!-- Form der bruges til registration af brugere, den binder til UserModel objektet i koden og viser data derfra -->
    <EditForm Model="UserModel"
        OnValidSubmit="@HandleValidUserRegistry"
        OnInvalidSubmit="@HandleInvalidUserRegistry">
        <div class="div-form">
            <label for="RoleId">Role</label>
            <select class="form-control" @bind="@UserModel.RoleId">
                <option />
                <option value="1"> Frivillig </option>
                <option value="2"> Koordinator </option>
                <ValidationMessage For="@(() => UserModel.RoleId)" />
            </select>
        </div>
        <div class="div-form">
            <label for="TeamId">Team</label>
            <select class="form-control" @bind="@UserModel.TeamId">
                <option/>
                @foreach (var team in teams)
                {
                    <option value="@team.TeamId"> @team.Name </option>
                }
                <ValidationMessage For="@(() => UserModel.TeamId)" />
            </select>
        </div>
        <div class="div-form">
            <label for="Name">Navn</label>
            <InputText id="Name" @bind-Value="UserModel.Name" class="form-control" />
            <ValidationMessage For="@(() => UserModel.Name)" />
        </div>
        <div class="div-form">
            <label for="Birthday">Fødselsdato</label>
            <InputDate id="Birthday" @bind-Value="UserModel.Birthday" class="form-control" />
            <ValidationMessage For="@(() => UserModel.Birthday)" />
        </div>
        <div class="div-form">
            <label for="Email">Emailadresse</label>
            <InputText id="Email" @bind-Value="UserModel.Email" class="form-control" />
            <ValidationMessage For="@(() => UserModel.Email)" />
        </div>
        <div class="div-form">
            <label for="Experience">Erfaring</label>
            <InputText id="Experience" @bind-Value="UserModel.Experience" class="form-control" />
            <ValidationMessage For="@(() => UserModel.Experience)" />
        </div>
        <div class="div-form">
            <label for="IsActive">Aktiv</label>
            <InputCheckbox id="IsActive" @bind-Value="UserModel.IsActive" class="form-check" />
            <ValidationMessage For="@(() => UserModel.IsActive)" />
        </div>
        <div class="div-form">
            <label for="GroupId">Gruppe</label>
            <select class="form-control" @bind="@UserModel.GroupId">
                <option/>
                <option value="1"> Alfatesters </option>
                <ValidationMessage For="@(() => UserModel.GroupId)" />
            </select>
        </div>
        <div class="div-form">
            <button type="submit" class="btn btn-primary">Registrer</button>
        </div>
    </EditForm>
 }

 @if (CurrentUser != null)
{
    <!-- Notifikation der bruges til at vise brugerens id, vigtigt fordi det er eneste funktionelle loginparameter -->
    <IdNotification Id=@CurrentUser.UserId.Value />
}

@if (LoginUserActive)
{
    <!-- Form der bruger brugerid til login, der burde være password men det er udenfor scope -->
    <EditForm Model="UserModel"
        OnValidSubmit="@HandleValidLogin"
        OnInvalidSubmit="@HandleInvalidLogin">
        <div class="div-form">
            <label for="UserId">Brugerid</label>
            <InputNumber id="UserId" @bind-Value="UserModel.UserId" class="form-control" />
            <ValidationMessage For="@(() => UserModel.UserId)" />
        </div>
        <div class="div-form">
            <!--Ikke implementeret, brug id i stedet-->
            <label for="Password">Password</label>
            <InputText id="UserPassword" @bind-Value="UserModel.Name" class="form-control" />
        </div>
        <div class="div-form">
            <button type="submit" class="btn btn-primary">Log ind</button>
        </div>
    </EditForm>
}

@if (EditUserActive)
{
    <!-- Form der bruges til at redigere i brugerdata, metoden der ændrer LoginUserActive til true trækker data fra localstorage og binder det til formen -->
     <EditForm Model="UserModel"
        OnValidSubmit="@HandleValidUserEdit"
        OnInvalidSubmit="@HandleInvalidUserEdit">
        <div class="div-form">
            <label for="TeamId">Team</label>
            <select class="form-control" @bind="@UserModel.TeamId">
                <option/>
                @foreach (var team in teams)
                {
                    <option value="@team.TeamId"> @team.Name </option>
                }
                <ValidationMessage For="@(() => UserModel.TeamId)" />
            </select>
        </div>
        <div class="div-form">
            <label for="Name">Navn</label>
            <InputText id="Name" @bind-Value="UserModel.Name" class="form-control" />
            <ValidationMessage For="@(() => UserModel.Name)" />
        </div>
        <div class="div-form">
            <label for="Birthday">Fødselsdato</label>
            <InputDate id="Birthday" @bind-Value="UserModel.Birthday" class="form-control" />
            <ValidationMessage For="@(() => UserModel.Birthday)" />
        </div>
        <div class="div-form">
            <label for="Email">Emailadresse</label>
            <InputText id="Email" @bind-Value="UserModel.Email" class="form-control" />
            <ValidationMessage For="@(() => UserModel.Email)" />
        </div>
        <div class="div-form">
            <label for="Experience">Erfaring</label>
            <InputText id="Experience" @bind-Value="UserModel.Experience" class="form-control" />
            <ValidationMessage For="@(() => UserModel.Experience)" />
        </div>
        <div class="div-form">
            <label for="IsActive">Aktiv</label>
            <InputCheckbox id="IsActive" @bind-Value="UserModel.IsActive" class="form-check" />
            <ValidationMessage For="@(() => UserModel.IsActive)" />
        </div>
        <div class="div-form">
            <label for="GroupId">Gruppe</label>
            <select class="form-control" @bind="@UserModel.GroupId">
                <option value="@CurrentUser.GroupId"> </option>
                <option value="1"> Alfatesters </option>
                <ValidationMessage For="@(() => UserModel.GroupId)" />
            </select>
        </div>
        <div class="div-form">
            <button type="submit" class="btn btn-primary">Rediger</button>
        </div>
    </EditForm>
}

@code{
    [Inject]
    public ITeamService TeamService { get; set; }

    [Inject]
    public IUserService UserService { get; set; }

    // Data der initialiseres med siden, teams bruges til dropdown af teams i registrationen, CurrentUser bliver trukket fra localstorage
    public User? CurrentUser;
    public bool LoadedData = false;
    public List<Team> teams = new List<Team>();

    // Serie af bools der styrer synlige elementer på siden
    public bool RegisterUserActive = false;
    public bool LoginUserActive = false;
    public bool EditUserActive = false;
    public bool NotifyUser = true;

    // Objektet som bruges til at registrere og ændre i brugerdata
    public User UserModel = new User();



    public async void UpdateLocalStorage(User user)
    {
        await localStore.SetItemAsync<User>("user", user);
    }

    public async void ClearLocalStorage()
    {
        await localStore.ClearAsync();
        CurrentUser = null;
    }

    // Metode der kaldes når siden startes op, den bruges i dette tilfælde til at trække data og vise de rigtige elementer i siden baseret derpå
    protected override async Task OnInitializedAsync()
    {
        CurrentUser = await localStore.GetItemAsync<User>("user");
        LoadedData = true;

        teams = (await TeamService.GetAllTeams()).ToList();

        if (CurrentUser == null){
            RegisterUser();
        }
        else{
            Profile();
        }

        StateHasChanged(); //Metode der siger til Blazor at den skal opdatere, den her kommer ofte.
    }

    // Metode der klargører UserModel til registration og viser elementet eller gemmer den hvis allerede synlig
    private void RegisterUser()
    {
        UserModel = new User();
        UserModel.Birthday = DateTime.Now.Date;
        LoginUserActive = false;
        EditUserActive = false;
        RegisterUserActive = !RegisterUserActive;
        StateHasChanged();
    }

    // Klargører UserModel til login og viser elementet eller gemmer den hvis allerede synlig
    private void Login()
    {
        UserModel = new User();
        RegisterUserActive = false;
        EditUserActive = false;
        LoginUserActive = !LoginUserActive;
        StateHasChanged();
    }

    // Fjerner CurrentUser og viser login elementet
    private void Logout()
    {
        CurrentUser = null;
        ClearLocalStorage();
        Login();
    }

    // Sætter UserModel til dataen fra localstorage og viser elementet til redigering deraf eller gemmer den hvis synlig
    private void Profile()
    {
        UserModel = CurrentUser;
        LoginUserActive = false;
        RegisterUserActive = false;
        EditUserActive = !EditUserActive;
        StateHasChanged();
    }

    // Metode der kaldes af registrations-formen når en valid bruger indtastes, metoden gemmer brugeren på databasen og displayer notifikation om id
    private async void HandleValidUserRegistry()
    {
        UserModel.UserId = await UserService.PostUser(UserModel);
        CurrentUser = await UserService.GetUser(UserModel.UserId.Value);
        UpdateLocalStorage(CurrentUser);
        UserModel = new User();
        Profile();
        StateHasChanged();
    }

    private void HandleInvalidUserRegistry()
    {
        Console.WriteLine("Invalid user registry");
    }

    // Kaldes af login-formen, tjekker databasen om id eksisterer og logger ind på den
    private async void HandleValidLogin()
    {
        CurrentUser = await UserService.GetUser(UserModel.UserId.Value);
        UpdateLocalStorage(CurrentUser);
        Profile();
        StateHasChanged();
    }

    private void HandleInvalidLogin()
    {
        Console.WriteLine("Invalid login");
    }

    // Kaldes af edit-formen, ændrer dataene og bevarer brugerens nuværende rolle og id
    private async void HandleValidUserEdit()
    {
        UserModel.UserId = CurrentUser.UserId;
        UserModel.RoleId = CurrentUser.RoleId;
        Console.WriteLine(UserModel.UserId);
        await UserService.PutUser(UserModel);
    }

    private void HandleInvalidUserEdit()
    {
        Console.WriteLine("Invalid user edit");
    }
}